@using UML.Models.ViewModels
@{
    ViewData["Title"] = "Home Page";
}
<div>
    @if (TempData["Message"] != null)
    {
        <span>@TempData["Message"]</span>
    }
</div>
@model EditorViewModel
@using (Html.BeginForm())
{

    @Html.TextBoxFor(EditorViewModel => EditorViewModel.userid, new { type = "hidden" })

    //Project Name box
    <label for="projectName" style="padding:5px; margin-bottom: 10px">Project name:</label>
    @Html.TextBoxFor(EditorViewModel => EditorViewModel.DiagramName, new { style = "width:25%", placeholder = "Enter a Project Name..." })

    //Save to Server button
    <input type="submit" value="saveToServer" />

    // JSON text box - uncomment type to hide
    <label for="jsonData" style="padding-left:20px">JSON Data:</label>
    @Html.TextBoxFor(EditorViewModel => EditorViewModel.mySavedModel, new { /* type = "hidden", */ id = "mySavedModel", style = "width:40%" })

}

<!-- Start Toolbar code -->

<nav class="navbar navbar-expand-lg navbar-dark bg-dark" id="toolbar">

    <!--Start Color Picker-->
    <div id="colorPicker">
        <label for="color">Color Picker:</label>
        <input type="color" id="color" name="color" value="#ffffff">
    </div>
    <!--End Color Picker-->
    <div id="selector">
        <input type="file" id="file-selector" onchange="openFromFile()" accept=".json">
    </div>
    <!--Begin Toolbar buttons-->
    <ul class="navbar-nav mr-auto" id="toolbar">
        <li class="nav-item">
            <span title="Add Class">
                <a class="nav-link" href="#" onclick="addClass()"><i class="fa fa-plus-square" "></i></a>
            </span>
        </li>
        <li class="nav-item">
            <span title="Save to JSON">
                <a class="nav-link" href="#" onclick="save()"><i class="fa fa-check-square"></i></a>
            </span>
        </li>
        <li class="nav-item">
            <span title="Load from JSON">
                <a class="nav-link" href="#" onclick="load()"><i class="fa fa-folder-open"></i></a>
            </span>
        </li>
        <li class="nav-item">
            <span title="Clear Diagram">
                <a class="nav-link" href="#" onclick="clearDiagram()"><i class="fa fa-trash-o"></i></a>
            </span>
        </li>
        <li class="nav-item">
            <span title="Save Image">
                <a class="nav-link" href="#" onclick="makeBlob()"><i class="fa fa-image"></i></a>
            </span>
        </li>
    </ul>

    <!-- Local export and import  -->
    <ul class="navbar-nav mr-auto" id="local-buttons">
        <li class="nav-item">
            <span title="Download Diagram">
                <a class="nav-link" href="#" onclick="downloadFile()"><i class="fa fa-download"></i></a>
            </span>
        </li>
        <li class="nav-item">
            <span title="Upload Diagram">
                <a class="nav-link" href="#">
                    <label for="file-selector"><i class="fa fa-upload"></i></label>
                </a>
            </span>
        </li>
    </ul>
</nav>
<!--End of Toolbar buttons-->
<!-- Start Interface code -->
<div class="diagram-wrapper">
    <div id="myDiagramDiv"></div>
</div>



<!--Save Text Area
<textarea id="mySavedModel" style="width:100%;height:200px">{ "class": "go.GraphLinksModel",</textarea>-->
<!--<textarea id="mySavedModel" style="width:100%;height:300px">{ "class": "go.GraphLinksModel",</textarea>-->

<script src="https://unpkg.com/gojs@2.2.15/release/go.js"></script>

<script>
    //warning to save before leaving
    window.onbeforeunload = function unload(e) {
        return "";
    };

    //keeps track of class names
    var classNames = new Array();
    const $ = go.GraphObject.make;
    const myDiagram =
        $(go.Diagram, "myDiagramDiv",
            { "undoManager.isEnabled": true });
    //Context Menu for Nodes
    var nodeMenu =
        $("ContextMenu",
            $("ContextMenuButton",
                $(go.TextBlock, "Delete"),
                {
                    click: function (e, button) {
                        e.diagram.commit(function (d) {
                            d.remove(button.part.adornedPart);
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Change Color"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let color = document.getElementById("color").value;

                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'color', color);
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Add Field"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let field = createField();
                            let fieldList = obj.part.adornedPart.data.fields.push(field);
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Add Method"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let method = createMethod();
                            let methodList = obj.part.adornedPart.data.methodBinding.push(method);
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'methods', methodList);
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Remove Method"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let selectedMethod = prompt("Please type the name of the method you want to remove: ");
                            let methodIndex = obj.part.adornedPart.data.methodBinding.findIndex(method => method.methodName === selectedMethod);
                            if (methodIndex !== -1) {
                                let updatedBinding = obj.part.adornedPart.data.methodBinding.splice(methodIndex, 1);
                                myDiagram.model.setDataProperty(obj.part.adornedPart.data, obj.part.adornedPart.data.methodBinding, updateClassNames);
                            }
                            else {
                                alert("Error: Method does not exist");
                            }
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Change Method Return Type"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let selectedMethod = prompt("Please type the name of the method you want to change: ");
                            let methodIndex = obj.part.adornedPart.data.methodBinding.findIndex(method => method.methodName === selectedMethod);
                            if (methodIndex !== -1) {
                                let input = prompt("Please enter the new return type: ");
                                if (input) {
                                    let updatedBinding = obj.part.adornedPart.data.methodBinding;
                                    updatedBinding[methodIndex].return_type = input;
                                    myDiagram.model.setDataProperty(obj.part.adornedPart.data, obj.part.adornedPart.data.methodBinding, updateClassNames);
                                }
                                else {
                                    input = "void";
                                    let updatedBinding = obj.part.adornedPart.data.methodBinding;
                                    updatedBinding[methodIndex].return_type = input;
                                    myDiagram.model.setDataProperty(obj.part.adornedPart.data, obj.part.adornedPart.data.methodBinding, updateClassNames);
                                }
                            }
                            else {
                                alert("Error: Method does not exist");
                            }
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Change Method Parameter"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let selectedMethod = prompt("Please Type the Method to Change:");
                            let methodIndex = obj.part.adornedPart.data.methodBinding.findIndex(method => method.methodName === selectedMethod);
                            if (methodIndex !== -1) {
                                let selectedParam = prompt("Please Type the Parameter to Change:");
                                let paramIndex = obj.part.adornedPart.data.methodBinding[methodIndex].methodParams.findIndex(param => param.name === selectedParam);
                                if (paramIndex !== -1) {
                                    let newType = prompt("Please enter a new type or press ok to skip: ");
                                    let newName = prompt("Please enter a new name or press ok to skip: ");
                                    let param = obj.part.adornedPart.data.methodBinding[methodIndex].methodParams[paramIndex];

                                    let updatedBinding = obj.part.adornedPart.data.methodBinding;

                                    if (newType) { updatedBinding[methodIndex].methodParams[paramIndex].type = newType; }
                                    if (newName) { updatedBinding[methodIndex].methodParams[paramIndex].name = newName; }
                                    myDiagram.model.setDataProperty(obj.part.adornedPart.data, obj.part.adornedPart.data.methodBinding, updateClassNames);
                                }
                                else {
                                    alert("Parameter does not exist");
                                }
                            }
                            else {
                                alert("The method typed does not exist");
                            }
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Add Parameter to Method"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let selectedMethod = prompt("Please Type the Method to Add a Parameter to:");
                            let methodIndex = obj.part.adornedPart.data.methodBinding.findIndex(method => method.methodName === selectedMethod);
                            if (methodIndex !== -1) {

                                let newType = prompt("Please enter the parameter's type:");
                                let newName = prompt("Please enter the parameters's name:");
                                let updatedBinding = obj.part.adornedPart.data.methodBinding;

                                if (newType && newName) { updatedBinding[methodIndex].methodParams.push({ name: newName, type: newType }); } else { alert("Error: Name or Type was Blank"); }

                                myDiagram.model.setDataProperty(obj.part.adornedPart.data, obj.part.adornedPart.data.methodBinding, updateClassNames);
                            }
                            else {
                                alert("The method typed does not exist");
                            }
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Remove Parameter from Method"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            let selectedMethod = prompt("Please Type the Method to Remove a Parameter From:");
                            let methodIndex = obj.part.adornedPart.data.methodBinding.findIndex(method => method.methodName === selectedMethod);
                            if (methodIndex !== -1) {

                                let selectedParam = prompt("Please enter the parameter name you want to remove: ");
                                let updatedBinding = obj.part.adornedPart.data.methodBinding;
                                let paramIndex = obj.part.adornedPart.data.methodBinding[methodIndex].methodParams.findIndex(param => param.name === selectedParam);

                                if (paramIndex !== -1) {
                                    if (selectedParam) { updatedBinding[methodIndex].methodParams.splice(paramIndex, 1) }
                                    myDiagram.model.setDataProperty(obj.part.adornedPart.data, obj.part.adornedPart.data.methodBinding, updateClassNames);
                                }
                                else {
                                    alert("Error: The parameter entered does not exist");
                                }

                            }
                            else {
                                alert("The method typed does not exist");
                            }
                            myDiagram.updateAllTargetBindings();
                        });
                    }
                })
        );
    //Template for methods
    var methodTemplate =
        $(go.Panel, "Horizontal",
            $(go.TextBlock,
                { isMultiline: false, editable: false, width: 12 }),
            $(go.TextBlock,
                { isMultiline: false, editable: true },
                new go.Binding("text", "methodName").makeTwoWay()),
            // method parameters
            $(go.TextBlock, "()",
                new go.Binding("text", "methodParams", function (par) {
                    var s = "(";
                    for (var i = 0; i < par.length; i++) {
                        var param = par[i];
                        if (i > 0) s += ", ";
                        s += param.name + ": " + param.type;
                    }
                    return s + ")";
                })),
            $(go.TextBlock, "",
                new go.Binding("text", "return_type", t => t ? ": " : "")),
            $(go.TextBlock,
                { isMultiline: false, editable: true },
                new go.Binding("text", "return_type").makeTwoWay())
        );
    var fieldTemplate =
        $(go.Panel, "Horizontal",
            $(go.TextBlock,
                { isMultiline: false, editable: false, width: 12 }),
            $(go.TextBlock,
                { isMultiline: false, editable: true },
                new go.Binding("text", "fieldName").makeTwoWay()),
            $(go.TextBlock, "",
                new go.Binding("text", "fieldType", t => t ? ": " : "")),
            $(go.TextBlock,
                { isMultiline: false, editable: true },
                new go.Binding("text", "fieldType").makeTwoWay())
        );

    myDiagram.nodeTemplate =
        $(go.Node, "Auto",
            {
                fromSpot: go.Spot.AllSides,
                toSpot: go.Spot.AllSides
            },
            new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
            $(go.Shape,
                {
                    //Specify ports, this needs to be here for node to be linkable
                    portId: "",
                    cursor: "pointer",
                    fromLinkable: true, fromLinkableSelfNode: true, fromLinkableDuplicates: true,
                    toLinkable: true, toLinkableSelfNode: true, toLinkableDuplicates: true
                },
                //bind the 'fill' command with the color stored in the node data. Color is passed from js prompt
                new go.Binding("fill", "color"),
            ),
            //places panel inside the above shape
            $(go.Panel, "Table",
                {
                    defaultAlignment: go.Spot.Top, defaultColumnSeparatorStroke: "black"
                },
                $(go.Panel, "Table",
                    { row: 1, column: 0 },
                    $(go.TextBlock,
                        {
                            editable: true,
                            row: 0, columnSpan: 2, margin: 3, alignment: go.Spot.Center,
                            font: "bold 12pt sans-serif",
                            isMultiline: false,  // don't allow embedded newlines
                            textValidation: checkDuplicates
                        },
                        new go.Binding("text", "className").makeTwoWay())
                ),
                $(go.TextBlock, "fields",
                    { row: 3, font: "italic 10pt sans-serif" },
                    new go.Binding("visible", "visible", v => !v).ofObject("fields")
                ),
                $("PanelExpanderButton", "fields",
                    { row: 3, column: 1 }),
                $(go.Panel, "Vertical",
                    {
                        name: "fields", row: 3, itemTemplate: fieldTemplate

                    },
                    new go.Binding("itemArray", "fields").makeTwoWay()

                ),
                $(go.TextBlock, "methods",
                    { row: 4, font: "italic 10pt sans-serif" },
                    new go.Binding("visible", "visible", v => !v).ofObject("methods")
                ),
                $("PanelExpanderButton", "methods",
                    { row: 4, column: 1 }),
                $(go.Panel, "Vertical",
                    {
                        name: "methods", row: 4, itemTemplate: methodTemplate

                    },
                    new go.Binding("itemArray", "methodBinding").makeTwoWay()

                ),
            )
        );

    //Assign context menu for nodes
    myDiagram.nodeTemplate.contextMenu = nodeMenu;

    //controls the buttons in the contextmenu and what functions they invoke
    var linkMenu =
        $("ContextMenu",
            $("ContextMenuButton",
                $(go.TextBlock, "Delete"),
                {
                    click: function (e, button) {
                        e.diagram.commit(function (d) {
                            d.remove(button.part.adornedPart);
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Aggregation"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'toArrow', 'StretchedDiamond');
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'fill', '#DAE4E4');
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Composition"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'toArrow', 'StretchedDiamond');
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'fill', 'black');
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Inheritance"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'toArrow', 'Triangle');
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'fill', '#DAE4E4');
                        });
                    }
                }),
            $("ContextMenuButton",
                $(go.TextBlock, "Realization"),
                {
                    click: function (e, obj) {
                        e.diagram.commit(function (d) {
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'toArrow', 'Triangle');
                            myDiagram.model.setDataProperty(obj.part.adornedPart.data, 'fill', 'black');
                        });
                    }
                })
        );

    myDiagram.addDiagramListener('LinkDrawn', function (e) {
        var link = e.subject;
        myDiagram.model.setDataProperty(link.data, 'toArrow', 'Triangle');
        myDiagram.updateAllTargetBindings();
    });

    myDiagram.linkTemplate =
        $(go.Link,
            {
                // allow the user to reconnnect existing links:
                relinkableFrom: true, relinkableTo: true,
                // draw the link path shorter than normal,
                // so that it does not interfere with the appearance of the arrowhead
                toShortLength: 2,
                contextMenu: linkMenu    // define a context menu for each node

            },
            $(go.Shape,
                { strokeWidth: 3 }),
            $(go.Shape,
                { stroke: 'black', scale: 2, strokeWidth: 1 },
                new go.Binding("toArrow", "toArrow").makeTwoWay(),
                new go.Binding("fill", "fill").makeTwoWay()
            )
        );

    // add data here if you want nodes to be loaded on default
    // deserialize json
    myDiagram.model = go.Model.fromJson(JSON.parse(document.getElementById("mySavedModel").value));
    //myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);

    //checks to see when anything is changed and updates the classnmaes list when something does
    myDiagram.addModelChangedListener(function (evt) {
        if (evt.isTransactionFinished) updateClassNames();
    });


    //Add new class onto diagram
    function addClass() {
        //initial prompt name
        let promptName = "Enter a Class Name...";
        let defaultColor = "white";
        //splits input string into indvidual attributes and stores them in an array
        let fields = [];
        let methods = [];
        //Work in progress, trying to make offset when node is created
        var loc = go.Point.stringify(myDiagram.viewportBounds.center.offset(Math.floor(Math.random() * 200), Math.floor(Math.random() * 200)));
        //alert(loc);
        myDiagram.model.addNodeData({ text: "new node", loc: loc, color: defaultColor, fields: fields, methodBinding: methods, className: promptName, visible: true });
        classNames.push(String(promptName));
    }

    //Clear diagram
    function clearDiagram() {
        const response = confirm("Are you sure you want to clear the diagram?");
        if (response) {
            myDiagram.model = new go.GraphLinksModel();
            classNames = [];
            fields = [];
            methods = [];
        }
    }


    //Saves current state of diagram
    function save() {
        let save = myDiagram.model.toJson();
        document.getElementById("mySavedModel").value = save;
        //document.getElementById("mySavedModel2").value = save;
        myDiagram.isModified = false;
        updateClassNames();
    }

    //Load state from given json data
    function load() {

        myDiagram.model = go.Model.fromJson(jsonAdapterFrom(JSON.parse(document.getElementById("mySavedModel").value)));
        myDiagram.startTransaction();
        myDiagram.updateAllRelationshipsFromData();
        myDiagram.updateAllTargetBindings();
        myDiagram.commitTransaction("update");
    }

    //Iterates through nodes and adds their classNames data to an array
    function updateClassNames() {
        classNames = [];
        for (var it = myDiagram.nodes; it.next();) {
            var n = it.value;  // n is now a Node or a Group
            if (!classNames.includes(n.data.className)) {
                classNames.push(n.data.className);
            }
        }
    }

    //checks to see if given string is already an existing class name
    function checkDuplicates(textblock, oldstr, newstr) {
        isDuplicate = classNames.includes(newstr);
        return !isDuplicate
    }

    //allows for save to be downloaded
    function createFile(filename, text) {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    function downloadFile() {
        download();
    }

    //Local export
    function download() {
        let save = JSON.stringify(jsonAdapterTo(JSON.parse(myDiagram.model.toJson())));
        myDiagram.isModified = false;
        createFile("save.json", save);
    }

    //grabs the first file uploaded to the 'file' html element and once succesfully uploaded, the callback function onload is invoked
    // storing the result in the mySavedModel textarea
    function openFromFile() {
        reader = new FileReader();
        reader.onload = function (e) {
            document.getElementById('mySavedModel').value = reader.result;
        }
        var file = document.getElementById('file-selector').files[0];
        reader.readAsText(file);
    }

    //prompts user for info to create a field
    function createField() {
        let fieldName = prompt("Please enter the field name");
        let fieldType = prompt("Please specify the field type");
        return { fieldType: fieldType, fieldName: fieldName };
    }

    //prompts user for info to create a method
    function createMethod() {
        methodParams = [];
        let methodName = prompt("Please enter the method name");
        let returnType = prompt("Please enter " + methodName + "'s return type or leave blank if void: ")
        if (!returnType) { returnType = "void"; }

        let num = prompt("Please specify the number of parameters for " + methodName);
        for (let i = 0; i < num; i++) {
            let methodParam = prompt("Please type parameter " + String(i + 1) + "'s name");
            let paramType = prompt("Please type " + methodParam + "'s type");
            methodParams.push({ name: methodParam, type: paramType });
        }
        return { methodName: methodName, return_type: returnType, methodParams: methodParams };
    }
    function myCallback(blob) {
        var url = window.URL.createObjectURL(blob);
        var currentTime = new Date();
        var filename = ("Diagram " + currentTime.toDateString() + "_" + currentTime.getSeconds() + "_" + currentTime.getMilliseconds() + ".png").replace(/\s+/g, '');

        var a = document.createElement("a");
        a.style = "display: none";
        a.href = url;
        a.download = filename;

        // IE 11
        if (window.navigator.msSaveBlob !== undefined) {
            window.navigator.msSaveBlob(blob, filename);
            return;
        }

        document.body.appendChild(a);
        requestAnimationFrame(() => {
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        });
    }

    function makeBlob() {
        var blob = myDiagram.makeImageData({ background: "white", returnType: "blob", callback: myCallback });
    }
    function renameKey(obj, oldKey, newKey) {
        obj[newKey] = obj[oldKey];
        delete obj[oldKey];
    }
    //converts universal data to the gojs format
    function jsonAdapterFrom(data) {
        let gojsData = {
            class: "GraphLinksModel",
            nodeDataArray: [],
            linkDataArray: [],
        };

        for (let i = 0; i < data.classes.length; i++) {
            gojsData.nodeDataArray[i] = {
                color: "white",
                className: data.classes[i].name,
                fields: [],
                methodBinding: [],
            };

            for (let field = 0; field < data.classes[i].fields.length; field++) {
                gojsData.nodeDataArray[i].fields.push(data.classes[i].fields[field]);
                renameKey(gojsData.nodeDataArray[i].fields[field], "name", "fieldName");
                renameKey(gojsData.nodeDataArray[i].fields[field], "type", "fieldType");
            }
            for (let method = 0; method < data.classes[i].methods.length; method++) {
                gojsData.nodeDataArray[i].methodBinding.push(
                    data.classes[i].methods[method]
                );
                renameKey(
                    gojsData.nodeDataArray[i].methodBinding[method],
                    "name",
                    "methodName"
                );
                renameKey(
                    gojsData.nodeDataArray[i].methodBinding[method],
                    "params",
                    "methodParams"
                );
            }
        }
        let uniqueCounter = -1;
        let uniqueArray = {};
        let previousChecked = [];
        let relationDict = {
            aggregation: ["StretchedDiamond", "#DAE4E4"],
            composition: ["StretchedDiamond", "Black"],
            inheritance: ["Triangle", "#DAE4E4"],
            realization: ["Triangle", "Black"],
        };
        for (let link = 0; link < data.relationships.length; link++) {
            gojsData.linkDataArray.push(data.relationships[link]);
            renameKey(gojsData.linkDataArray[link], "source", "from");
            renameKey(gojsData.linkDataArray[link], "destination", "to");
            renameKey(gojsData.linkDataArray[link], "type", "toArrow");

            let relationType = data.relationships[link].toArrow;
            gojsData.linkDataArray[link]["fill"] = relationDict[relationType][1];
            gojsData.linkDataArray[link].toArrow = relationDict[relationType][0];

            let keyFrom = gojsData.linkDataArray[link].from;
            let keyTo = gojsData.linkDataArray[link].to;

            if (previousChecked.indexOf(keyFrom) === -1) {
                previousChecked.push(keyFrom);
                uniqueArray[keyFrom] = uniqueCounter--;
            }

            if (previousChecked.indexOf(keyTo) === -1) {
                previousChecked.push(keyTo);
                uniqueArray[keyTo] = uniqueCounter--;
            }
            gojsData.linkDataArray[link].from = uniqueArray[keyFrom];
            gojsData.linkDataArray[link].to = uniqueArray[keyTo];
        }

        return gojsData;
    }

    //converts gojs data to universal format
    function jsonAdapterTo(gojsData) {
        let data = {
            classes: [],
            relationships: [],
        };
        for (let i = 0; i < gojsData.nodeDataArray.length; i++) {
            data.classes[i] = {
                name: gojsData.nodeDataArray[i].className,
                fields: [],
                methods: [],
            };

            for (
                let field = 0;
                field < gojsData.nodeDataArray[i].fields.length;
                field++
            ) {
                data.classes[i].fields.push(gojsData.nodeDataArray[i].fields[field]);
                renameKey(data.classes[i].fields[field], "fieldName", "name");
                renameKey(data.classes[i].fields[field], "fieldType", "type");
            }
            for (
                let method = 0;
                method < gojsData.nodeDataArray[i].methodBinding.length;
                method++
            ) {
                data.classes[i].methods.push(
                    gojsData.nodeDataArray[i].methodBinding[method]
                );
                renameKey(data.classes[i].methods[method], "methodName", "name");
                renameKey(data.classes[i].methods[method], "methodParams", "params");
            }
        }
        let previousChecked = [];
        let relationDict = {
            "StretchedDiamond": { "#DAE4E4": "aggregation", "Black": "composition" },
            "Triangle": { "#DAE4E4": "inheritance", "Black": "realization" }
        };
        let relationNameDict = {};
        for (var it = myDiagram.nodes; it.next();) {
            var n = it.value;  // n is now a Node or a Group
            relationNameDict[n.data.key] = n.data.className;
        }


        for (let link = 0; link < gojsData.linkDataArray.length; link++) {
            data.relationships.push(gojsData.linkDataArray[link]);
            renameKey(data.relationships[link], "from", "source");
            renameKey(data.relationships[link], "to", "destination");
            renameKey(data.relationships[link], "toArrow", "type");

            let arrow = gojsData.linkDataArray[link].toArrow;
            let color =  gojsData.linkDataArray[link].fill;

            data.relationships[link].type = relationDict["StretchedDiamond"][String(color)];
            delete data.relationships[link].fill;

            data.relationships[link].source = relationNameDict[gojsData.linkDataArray[link].source];
            data.relationships[link].destination = relationNameDict[gojsData.linkDataArray[link].destination];
        }

        return data;
    }

    
</script>